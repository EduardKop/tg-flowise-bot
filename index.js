import 'dotenv/config';
import express from 'express';
import { Telegraf } from 'telegraf';
import axios from 'axios';

const {
  BOT_TOKEN,
  PUBLIC_URL,
  WEBHOOK_SECRET = 'secret',
  LANGFLOW_BASE_URL,
  LANGFLOW_FLOW_ID,
  LANGFLOW_API_KEY
} = process.env;

const PORT = Number(process.env.PORT) || 8080;
const CLEAN_PUBLIC_URL = (PUBLIC_URL || '').replace(/\/+$/, '');
const CLEAN_LANGFLOW_BASE_URL = (LANGFLOW_BASE_URL || '').replace(/\/+$/, '');

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
if (!CLEAN_LANGFLOW_BASE_URL || !LANGFLOW_FLOW_ID) {
  throw new Error('LANGFLOW_BASE_URL and LANGFLOW_FLOW_ID are required');
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Health endpoints (–¥–ª—è Railway health-check)
app.get('/', (_, res) => res.status(200).send('OK'));
app.get('/healthz', (_, res) => res.status(200).send('OK'));

// Webhook endpoint
const webhookPath = `/telegraf/${WEBHOOK_SECRET}`;
app.use(express.json());
app.use(bot.webhookCallback(webhookPath));

// /start
bot.start(async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –©–æ–± —è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤, –ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø –∑—ñ —Å–ª–æ–≤–∞ "–ß–∞—Ç" –∞–±–æ "–ö—Ä—ñ—à".\n–ù–∞–ø—Ä.: "–ö—Ä—ñ—à —è–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π" –∞–±–æ "—á–∞—Ç, –ø—ñ–¥–∫–∞–∂–∏...".'
  );
});

// –î—ñ—Å—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Langflow
function extractAnswer(data: any) {
  try {
    const outputs = data && data.outputs && data.outputs[0] && data.outputs[0].outputs;
    if (Array.isArray(outputs)) {
      for (const o of outputs) {
        const msg =
          (o && o.results && (o.results.message && o.results.message.text)) ||
          (o && o.results && o.results.text);
        if (typeof msg === 'string' && msg.trim()) return msg;
      }
    }
    if (typeof data?.message === 'string' && data.message.trim()) return data.message;
  } catch (_) {}
  return 'ü§ñ (–ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å)';
}

/**
 * –¢–†–ò–ì–ï–†:
 *   ‚Äî –°–ø—Ä–∞—Ü—å–æ–≤—É—î –ª–∏—à–µ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø –Ω–∞ "–ß–∞—Ç" –∞–±–æ "–ö—Ä—ñ—à" (–±—É–¥—å-—è–∫–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä).
 *   ‚Äî –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–∏–≥–µ—Ä + —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ —Ç–∞ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏.
 *   ‚Äî –Ø–∫—â–æ —Ç—Ä–∏–≥–µ—Ä–∞ –Ω–µ–º–∞—î ‚Äî –ù–Ü–ß–û–ì–û –Ω–µ —Ä–æ–±–∏–º–æ (–±–æ—Ç –º–æ–≤—á–∏—Ç—å).
 */
const TRIGGER_RE = /^\s*(—á–∞—Ç|–∫—Ä—ñ—à)\b[\s,:-]*/iu;

// –ü—Ä–æ–∫—Å—É—é—î–º–æ —Ç–µ–∫—Å—Ç —É Langflow –ª–∏—à–µ —è–∫—â–æ —î —Ç—Ä–∏–≥–µ—Ä
bot.on('text', async (ctx) => {
  const raw = ctx.message?.text ?? '';
  const match = raw.match(TRIGGER_RE);

  // –ù–µ–º–∞—î —Ç—Ä–∏–≥–µ—Ä–∞ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (!match) return;

  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ "–ß–∞—Ç"/"–ö—Ä—ñ—à" + —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏, –ª–∏—à–∞—î–º–æ –ª–∏—à–µ –∫–æ—Ä–∏—Å–Ω—É —á–∞—Å—Ç–∏–Ω—É
  const cleaned = raw.replace(TRIGGER_RE, '').trim();

  // –Ø–∫—â–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –Ω—ñ—á–æ–≥–æ –Ω–µ –ª–∏—à–∏–ª–æ—Å—å ‚Äî —Ç–µ–∂ –º–æ–≤—á–∏–º–æ
  if (!cleaned) return;

  const userId = String(ctx.chat.id);

  try {
    const url = `${CLEAN_LANGFLOW_BASE_URL}/api/v1/run/${encodeURIComponent(LANGFLOW_FLOW_ID)}`;

    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      accept: 'application/json',
    };
    if (LANGFLOW_API_KEY) headers['x-api-key'] = LANGFLOW_API_KEY;

    const payload = {
      input_value: cleaned,     // <-- —É –ø—Ä–æ–º–ø—Ç —ñ–¥–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç –ë–ï–ó "–ß–∞—Ç/–ö—Ä—ñ—à"
      session_id: userId,       // —â–æ–± —É—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —á–∞—Ç—É
      input_type: 'chat',
      output_type: 'chat',
      // output_component: 'ChatOutput',
      // tweaks: {}
    };

    const { data } = await axios.post(url, payload, { headers });
    const answer = extractAnswer(data);
    await ctx.reply(answer, { reply_to_message_id: ctx.message.message_id });
  } catch (err: any) {
    console.error('Langflow error:', err?.response?.data || err.message);
    await ctx.reply('–û–π, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ Langflow üôà');
  }
});

let server: any;
async function boot() {
  server = app.listen(PORT, () => console.log(`Server listening on ${PORT}`));

  if (CLEAN_PUBLIC_URL) {
    const fullWebhook = `${CLEAN_PUBLIC_URL}${webhookPath}`;
    await bot.telegram.setWebhook(fullWebhook);
    console.log('Webhook set ->', fullWebhook);
  } else {
    console.log(
      'PUBLIC_URL not set yet. Set it in Railway env and restart to register webhook.'
    );
  }
}

function shutdown(signal: string) {
  console.log(`${signal} received, closing server...`);
  if (server) {
    server.close(() => {
      console.log('HTTP server closed');
      process.exit(0);
    });
  } else {
    process.exit(0);
  }
}
process.on('SIGTERM', () => shutdown('SIGTERM'));
process.on('SIGINT', () => shutdown('SIGINT'));

boot().catch((e) => {
  console.error(e);
  process.exit(1);
});
